((; :comment) ~>)

((t :desc :!val :val) ~> (✅ :desc :val))
((t :desc :!got :wanted) ~> (❌ :desc got :got wanted :wanted))
((Test a :desc Given :test We expect :val) ~> (t :desc :test :val))


(t "test failure" (+1 +3 +3) (+1 +2 +3))
(t "test success" (+1 +2 +3) (+1 +2 +3))

(Test a "Basic rule"
    Given ((hello ~> world) hello) 
    We expect ((defined "hello ~> world") world))

(Test a "Rule with many terms on LHS"
    Given ((LHS.Test ~> Let's test the LHS) LHS.Test) 
    We expect ((defined "LHS.Test ~> Let's test the LHS") Let's test the LHS))

(Test a "Pattern variable"
    Given (((hello :a) ~> (asdjklh :a)) (hello world)) 
    We expect ((defined "(hello :a) ~> (asdjklh :a)") (asdjklh world)))

(Test a "Sum accumulator"
    Given (((+ ?+ ?+ ?+) ~> ?+) (+ +69 420 -1337)) 
    We expect ((defined "(+ ?+ ?+ ?+) ~> ?+") -848))

(Test a "Cons lists parse"
    Given ([this is a cons list]) 
    We expect ((this (is (a (cons (list ())))))))

(Test a "Cons list tail variable definition"
    Given ([cons tail ::tail] ~> :tail)
    We expect (defined "(cons (tail :tail)) ~> :tail"))

(Test a "Cons list tail variable application"
    Given 
       ([cons head]
        [cons tail]
        [cons tail rest of the list])
    We expect 
       ((cons (head ()))
        ()
        (rest (of (the (list ()))))))

(Test a "Regex definition with anchors"
    Given (/^REGEX SAYS: Hello!$/ ~> "Hello!")
    We expect (defined "/^REGEX SAYS: Hello!$/ ~> \"Hello!\""))

(Test a "Regex apply"
    Given ("SIMON REGEX SAYS: Hello!" "REGEX SAYS: Hello!" "Unrelated string")
    We expect ("SIMON REGEX SAYS: Hello!" "Hello!" "Unrelated string"))

(Test a "Regex definition with groups"
    Given (/^(regex) (group) (test)!$/ ~> "$3 $1 $2 $0" ($1))
    We expect (defined "/^(regex) (group) (test)!$/ ~> \"$3 $1 $2 $0\" ($1)"))

(Test a "Regex apply group replacement"
    Given ("regex group test!")
    We expect ("test regex group regex group test!" ("regex")))

(Test a "Regex definition with offset"
    Given ((/wow (floating) regex/ ~> "1234") "I can't believe it, wow floating regex is so cool!")
    We expect ((defined "/wow (floating) regex/ ~> \"1234\"") "1234"))

(Test a "Regex with offset, pre- and post-match groups"
    Given ((/(floating) regex/ ~> "$> $1 $<") "this should match my floating regex!")
    We expect ((defined "/(floating) regex/ ~> \"$> $1 $<\"") "! floating this should match my "))
