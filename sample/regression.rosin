((; :comment) ~>)

((t :desc :!val :val) ~> (✅ :desc :val))
((t :desc :!got :wanted) ~> (❌ :desc got :got wanted :wanted))
((Test a :desc Given :test We expect :val) ~> (t :desc :test :val))


(t "test failure" (+1 +3 +3) (+1 +2 +3))
(t "test success" (+1 +2 +3) (+1 +2 +3))

(Test a "Basic rule"
    Given ((hello ~> world) hello) 
    We expect ((defined "hello ~> world") world))

(Test a "Pattern variable"
    Given (((hello :a) ~> (asdjklh :a)) (hello world)) 
    We expect ((defined "(hello :a) ~> (asdjklh :a)") (asdjklh world)))

(Test a "Sum accumulator"
    Given (((+ :?+ :?+ :?+) ~> :?+) (+ +69 +420 +-1337)) 
    We expect ((defined "(+ :?+ :?+ :?+) ~> :?+") +-848))

(Test a "Cons lists parse"
    Given ([this is a cons list]) 
    We expect ((this (is (a (cons (list ())))))))

(Test a "Cons list tail variable"
    Given 
       (([cons tail ::tail] ~> :tail)
        [cons head]
        [cons tail]
        [cons tail rest of the list])
    We expect 
       ((defined "(cons (tail :tail)) ~> :tail")
        (cons (head ()))
        ()
        (rest (of (the (list ()))))))

(Test a "Basic regex parse"
    Given (
        (/^REGEX SAYS: Hello!$/ ~> "Hello!")
        "REGEX SAYS: Hello!"
        "Unrelated string"
    )
    We expect (
        (defined "/REGEX SAYS: Hello!/ ~> \"Hello!\"")
        "Hello!"
        "Unrelated string"
    ))